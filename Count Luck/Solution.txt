
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

	public static void main(String[] args) {

		/* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
		Scanner scan = new Scanner(System.in);
		int testCase = scan.nextInt();

		for(int t = 0; t < testCase; t++)
		{
			int n = scan.nextInt();
			int m = scan.nextInt();

			String [][]arr = new String[n][m];

			int mx = 0, my = 0;
			for(int x = 0; x < n; x++)
			{
				String line = scan.next();

				for(int y = 0; y < m; y++)
				{
					char c = line.charAt(y);

					arr[x][y] = c + "";

					if(c == 'M')
					{
						mx = x;
						my = y;
					}
				}
			}


			int guess = scan.nextInt(); 

			Search(arr, mx, my, guess);
		}

	}

	private static String [][]newArray;
	private static ArrayList<Integer> queue; 
	private static ArrayList<Integer> X, Y;
	private static int number_of_guesses;

	public static void Search(String [][]arr, int startX, int startY, int guess)
	{
		queue = new ArrayList<Integer>();
		X = new ArrayList<Integer>();
		Y = new ArrayList<Integer>();

		newArray = arr;
		number_of_guesses = guess;
		X.add(startX);
		Y.add(startY);
		queue.add(0); 
		traverse();
	}

	public static void traverse()
	{
		int counter = 1;  
		int totalGuess = 0;
		while(!queue.isEmpty())   
		{
			int chances = 0; 
			int index = queue.get(0); 
			queue.remove(0); 

			int currentX = X.get(index);
			int currentY = Y.get(index);
			if(currentY > 0)
			{
				if(newArray[currentX][currentY - 1].equals("*"))
				{
					int newX = currentX;
					int newY = currentY - 1;
					boolean flag = duplicate(newX, newY);

					if(flag)
					{
						X.add(newX);
						Y.add(newY);
						queue.add(counter);
						counter++;
						chances++;
						break;
					}

				}
				else if(newArray[currentX][currentY - 1].equals("."))
				{
					int newX = currentX;
					int newY = currentY - 1;
					boolean flag = duplicate(newX, newY);

					if(flag)
					{
						X.add(newX);
						Y.add(newY);
						queue.add(counter);
						counter++;
						chances++; 
					}
				}
			}

			if(currentY < newArray[0].length - 1)
			{

				if(newArray[currentX][currentY + 1].equals("*"))
				{
					int newX = currentX;
					int newY = currentY + 1;
					boolean flag = duplicate(newX, newY);

					if(flag)
					{

						X.add(newX);
						Y.add(newY);
						queue.add(counter);
						counter++;
						chances++;
						break;
					}

				}
				else if(newArray[currentX][currentY + 1].equals("."))
				{
					int newX = currentX;
					int newY = currentY + 1;
					boolean flag = duplicate(newX, newY);

					if(flag)
					{

						X.add(newX);
						Y.add(newY);
						queue.add(counter);
						counter++;
						chances++;

					}
				}
			}

			if(currentX > 0)
			{

				if(newArray[currentX - 1][currentY].equals("*"))
				{
					int newX = currentX - 1;
					int newY = currentY;
					boolean flag = duplicate(newX, newY);

					if(flag)
					{
						X.add(newX);
						Y.add(newY);
						queue.add(counter);
						counter++;
						chances++;
						break;
					}

				}
				else if(newArray[currentX - 1][currentY].equals("."))
				{
					int newX = currentX - 1;
					int newY = currentY;
					boolean flag = duplicate(newX, newY);

					if(flag)
					{

						X.add(newX);
						Y.add(newY);
						queue.add(counter);
						counter++;
						chances++;

					}
				}
			}
			if(currentX < newArray.length - 1)
			{

				if(newArray[currentX + 1][currentY].equals("*"))
				{
					int newX = currentX + 1;
					int newY = currentY;

					boolean flag = duplicate(newX, newY);

					if(flag)
					{
						X.add(newX);
						Y.add(newY);
						queue.add(counter);
						counter++;
						chances++;
						break;
					}

				}
				else if(newArray[currentX + 1][currentY].equals("."))
				{
					int newX = currentX + 1;
					int newY = currentY;
					boolean flag = duplicate(newX, newY);

					if(flag)
					{
						X.add(newX);
						Y.add(newY);
						queue.add(counter);
						counter++;
						chances++;
					}
				}
			}

			if(chances > 1)
			{
				totalGuess++;
			}


		}



		if(totalGuess != number_of_guesses)
		{
			System.out.println("Oops!");
		}
		else
		{
			System.out.println("Impressed");
		}
	}

	public static boolean duplicate(int newX, int newY)
	{
		for(int i = 0; i < X.size(); i++)
		{
			if(X.get(i) == newX && Y.get(i) == newY)
			{

				return false;
			}
		}
		return true;
	}
}